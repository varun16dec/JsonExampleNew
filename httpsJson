package com.example.radha.jsonexample;

import android.nfc.Tag;
import android.provider.Settings;
import android.text.TextUtils;
import android.util.Log;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.HttpCookie;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.jar.Attributes;

import javax.net.ssl.HttpsURLConnection;

/**
 * Created by radha on 1/3/2016.
 */
public class HTTPSTesting {
    final static String TAG="HTTPSTesting.java";
    static HttpsURLConnection connection=null;
    static Map<String, List<String>> headerFields;
    static List<String> cookiesHeader;
    static boolean firstConnection=true;
    static final String COOKIES_HEADER = "Set-Cookie";

    public String convertNameValuePairToString(List<NameValuePair> params) {
        StringBuilder result = new StringBuilder();
        boolean first = true;


        for (NameValuePair pair : params) {
            if (first) {
                first = false;
            } else result.append("&");
            try {
                result.append(URLEncoder.encode(pair.getName(), "UTF-8"));
                result.append("=");
                result.append(URLEncoder.encode(pair.getValue(), "UTF-8"));

            }catch(Exception e){
        }
    }
        return result.toString();
    }
    public void checkCertificate(){

        try{
            URL url = new URL("https://beta.magzhub.com/testing.php");
            connection= (HttpsURLConnection)url.openConnection();
            List<NameValuePair> params=new ArrayList<NameValuePair>();
            params.add(new BasicNameValuePair("email", "vb@gmail.com"));
            params.add(new BasicNameValuePair("name", "vb"));
            String result=convertNameValuePairToString(params);

            /*InputStream in = urlConnection.getInputStream();
            BufferedReader reader =new BufferedReader(new InputStreamReader(in));
            StringBuilder sb=new StringBuilder();
            String line=null;
            while ((line=reader.readLine())!=null){
                sb.append(line+"\n");
            }
            Log.e("HTTPSTesting : ", "Certificate : " + sb.toString());
            */
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);
           /* c.setRequestProperty("Content-length", "0");
            c.setUseCaches(false);
            c.setAllowUserInteraction(false);
            c.setConnectTimeout(timeout);
            c.setReadTimeout(timeout);
            */

            connection.connect();

            try( DataOutputStream wr = new DataOutputStream( connection.getOutputStream())) {
                wr.writeBytes(result);
            }
            int status = connection.getResponseCode();

            switch (status) {
                case 200:
                case 201:
                    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    StringBuilder sb = new StringBuilder();
                    String line;
                    while ((line = br.readLine()) != null) {
                        sb.append(line + "\n");
                    }
                    br.close();
                    sb.toString();
                    Log.e("HTTPS connection : ","Json String "+ sb.toString());
            }


        }catch(Exception e){

        }
    }
    public JSONObject makingConnectionForJsonObject(String stringUrl, List<NameValuePair> params,String method  ){
        StringBuilder sb = new StringBuilder();
        try {
            URL url = new URL(stringUrl);
            connection = (HttpsURLConnection) url.openConnection();
        }catch (Exception e) {
            Log.e(TAG, "error in URL HTTPurlconnection");
            e.printStackTrace();
        }
        String paramString=convertNameValuePairToString(params);
        try {

            connection.setRequestMethod(method);
            connection.setDoOutput(true);
           /* c.setRequestProperty("Content-length", "0");
            c.setUseCaches(false);
            c.setAllowUserInteraction(false);
            c.setConnectTimeout(timeout);
            c.setReadTimeout(timeout);
            */
            connection.connect();

            //send string to server
        }catch (Exception e) {
            Log.e(TAG,"error in connection.connect");
            e.printStackTrace();
        }
        try{
            DataOutputStream wr = new DataOutputStream( connection.getOutputStream());
            wr.writeBytes(paramString);
        }catch (Exception e) {
            Log.e(TAG,"error in DataOutputStream ");
            e.printStackTrace();
        }
        if(firstConnection){
            // msCookieManager.getInstance().setAcceptCookie(true);
            // cookieHandler.setDefault(msCookieManager);
            headerFields = connection.getHeaderFields();
            Log.e(TAG,connection.getHeaderFields().toString());
            cookiesHeader = headerFields.get(COOKIES_HEADER);
           /* if(cookiesHeader != null)
            {
                for (String cookie : cookiesHeader)
                {
                    Log.e(TAG,cookie);
                    HttpCookie.parse(cookie).size();
                   // MainActivity.cookieManager.getCookieStore().add(null, HttpCookie.parse(cookie).size());
                   // Log.e(TAG, String.valueOf(MainActivity.cookieManager.getCookieStore().getCookies().size()));
                   // Log.e(TAG,MainActivity.cookieManager.getCookieStore().getCookies().toString());
                }
            }
            */
            if(cookiesHeader!=null){
                for(String cookie:cookiesHeader){
                    Log.e(TAG,cookie);
                    Log.e(TAG,String.valueOf(HttpCookie.parse(cookie).size()));
                    Log.e(TAG,String.valueOf(HttpCookie.parse(cookie).get(0)));
                    MainActivity.cookieManager.getCookieStore().add(null, HttpCookie.parse(cookie).get(0));
                    Log.e(TAG, String.valueOf(MainActivity.cookieManager.getCookieStore().getCookies().size()));
                    Log.e(TAG,String.valueOf(MainActivity.cookieManager.getCookieStore().getCookies().get(0)));
                }
            }

            firstConnection=false;
        }


        //getting response from server
        try{
            int status = connection.getResponseCode();
            Log.e(TAG,"status"+status);
            switch (status) {
                case 200:
                case 201:
                    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    String line;
                    while ((line = br.readLine()) != null) {
                        sb.append(line + "\n");
                    }
                    br.close();
                    sb.toString();
                    Log.e("HTTPS connection : ","Json String "+ sb.toString());
            }
        }catch(Exception e){
            Log.e(TAG,"inputstream error ");
            e.printStackTrace();
        }

        try {
            JSONObject jsonObject=new JSONObject(sb.toString());
            return jsonObject;

        }catch (Exception e) {

            return null;
        }
    }
    public JSONArray getJSONArrayHTTPS(String urlstring){
        StringBuilder sb2= new StringBuilder();
        try{
            URL url= new URL(urlstring);
            connection=(HttpsURLConnection)url.openConnection();
        }catch (Exception e){
            e.printStackTrace();
            Log.e(TAG, "Error in url connection in GETJSONARRAY");
        }
        try{
            connection.setRequestMethod("POST");
            if(firstConnection==false){
                if(MainActivity.cookieManager.getCookieStore().getCookies().size() > 0)
                {
                    connection.setRequestProperty("Cookie", TextUtils.join(";",MainActivity.cookieManager.getCookieStore().getCookies()));
                }
            }

            connection.connect();
        }catch (Exception e){
            e.printStackTrace();
            Log.e(TAG, "error in connection.connect");
        }
        try{
            int status=connection.getResponseCode();
            Log.e(TAG,"Status "+status);
            switch (status){
                case 200:
                case 201:
                    BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    String line;
                    while ((line = br.readLine()) != null) {
                        sb2.append(line + "\n");
                    }
                    br.close();
                    sb2.toString();
                    Log.e("HTTPS connection : ","Json String "+ sb2.toString());
            }
        }catch(Exception e){
            Log.e(TAG,"inputstream error ");
            e.printStackTrace();
        }

        try {
            JSONArray jarray = new JSONArray(sb2.toString());
            Log.e(TAG,"jarray"+jarray);
            return  jarray;
        }catch (Exception e){
            e.printStackTrace();
            Log.e(TAG,"Error in Parsing JSON");
        }
        return null;
    }


}
